
Output Table
Line NO		 Lexeme		 Token			 blockNumber		 blockOrder
1 		 #include 		 PREPROCESSOR 			 0 		 0
1 		 "s.c" 		 HEADER 			 0 		 0
2 		 #define 		 MACRO 			 0 		 0
2 		 cond 		 IDENTIFIER 			 0 		 0
2 		 20 		 INTEGER 			 0 		 0
4 		 int 		 DATATYPE-INT 			 0 		 0
4 		 fun 		 FUNCTION 			 0 		 0
4 		 double 		 DATATYPE-DOUBLE 			 0 		 0
4 		 b 		 IDENTIFIER 			 0 		 0
4 		 , 		 COMMA 			 0 		 0
4 		 const 		 ReservedKey_CONST 			 0 		 0
4 		 char* 		 PTR 			 0 		 0
4 		 argv[] 		 PTRARRAY 			 0 		 0
4 		 ) 		 RPAREN 			 0 		 0
5 		 { 		 LBRACE 			 1 		 1
11 		 int 		 DATATYPE-INT 			 1 		 1
11 		 a 		 IDENTIFIER 			 1 		 1
11 		 = 		 EQUALS 			 1 		 1
11 		 b 		 IDENTIFIER 			 1 		 1
11 		 = 		 EQUALS 			 1 		 1
11 		 5 		 INTEGER 			 1 		 1
11 		 ; 		 SEMICOLON 			 1 		 1
12 		 float 		 DATATYPE-FLOAT 			 1 		 1
12 		 z 		 IDENTIFIER 			 1 		 1
12 		 = 		 EQUALS 			 1 		 1
12 		 25.00 		 FLOAT 			 1 		 1
12 		 f 		 IDENTIFIER 			 1 		 1
12 		 ; 		 SEMICOLON 			 1 		 1
13 		 if 		 ReservedKey_IF 			 1 		 1
13 		 ( 		 LPAREN 			 1 		 1
13 		 1 		 INTEGER 			 1 		 1
13 		 ) 		 RPAREN 			 1 		 1
13 		 { 		 LBRACE 			 2 		 2
14 		 int 		 DATATYPE-INT 			 2 		 2
14 		 j 		 IDENTIFIER 			 2 		 2
14 		 = 		 EQUALS 			 2 		 2
14 		 2 		 INTEGER 			 2 		 2
14 		 ; 		 SEMICOLON 			 2 		 2
15 		 } 		 RBRACE 			 1 		 2
16 		 if 		 ReservedKey_IF 			 1 		 2
16 		 ( 		 LPAREN 			 1 		 2
16 		 2 		 INTEGER 			 1 		 2
16 		 ) 		 RPAREN 			 1 		 2
16 		 { 		 LBRACE 			 2 		 3
17 		 int 		 DATATYPE-INT 			 2 		 3
17 		 j 		 IDENTIFIER 			 2 		 3
17 		 = 		 EQUALS 			 2 		 3
17 		 3 		 INTEGER 			 2 		 3
17 		 ; 		 SEMICOLON 			 2 		 3
18 		 } 		 RBRACE 			 1 		 3
19 		 printf 		 ReservedKey_PRINT 			 1 		 3
19 		 ( 		 LPAREN 			 1 		 3
19 		 "Hello World\n" 		 STRCONST 			 1 		 3
19 		 ) 		 RPAREN 			 1 		 3
19 		 ; 		 SEMICOLON 			 1 		 3
21 		 return 		 ReservedKey_RET 			 1 		 3
21 		 0 		 INTEGER 			 1 		 3
21 		 ; 		 SEMICOLON 			 1 		 3
22 		 } 		 RBRACE 			 0 		 3

SymbolTable

Token							 Symbol 		Type	 	Size
IDENTIFIER(b) at pos(48) in line(4) - blockNumber(0) blockOrder(0) 							 b 		 double 		 16
IDENTIFIER(a) at pos(105) in line(11) - blockNumber(1) blockOrder(1) 							 a 		 int 		 4
IDENTIFIER(b) at pos(109) in line(11) - blockNumber(1) blockOrder(1) 							 b 		 int 		 4
IDENTIFIER(z) at pos(123) in line(12) - blockNumber(1) blockOrder(1) 							 z 		 float 		 8
IDENTIFIER(f) at pos(131) in line(12) - blockNumber(1) blockOrder(1) 							 f 		 float 		 8
IDENTIFIER(j) at pos(148) in line(14) - blockNumber(2) blockOrder(2) 							 j 		 int 		 4
IDENTIFIER(j) at pos(172) in line(17) - blockNumber(2) blockOrder(3) 							 j 		 int 		 4

NumTable

Number						 	Token 		Type	 	Value	
INTEGER(20) at pos(28) in line(2) - blockNumber(0) blockOrder(0) 							 INTEGER 		 int 		 20
INTEGER(5) at pos(113) in line(11) - blockNumber(1) blockOrder(1) 							 INTEGER 		 int 		 5
FLOAT(25.00) at pos(126) in line(12) - blockNumber(1) blockOrder(1) 							 FLOAT 		 float 		 25.00
INTEGER(1) at pos(138) in line(13) - blockNumber(1) blockOrder(1) 							 INTEGER 		 int 		 1
INTEGER(2) at pos(152) in line(14) - blockNumber(2) blockOrder(2) 							 INTEGER 		 int 		 2
INTEGER(2) at pos(162) in line(16) - blockNumber(1) blockOrder(2) 							 INTEGER 		 int 		 2
INTEGER(3) at pos(176) in line(17) - blockNumber(2) blockOrder(3) 							 INTEGER 		 int 		 3
INTEGER(0) at pos(222) in line(21) - blockNumber(1) blockOrder(3) 							 INTEGER 		 int 		 0

CommentTable

Token				 Type		 line		 position		 blockNumber		 blockOrder
// comment
 				 SLINECOMMENT 		 6 		 75 		 1 		 1
/* me
	*
	*/ 				 MLINECOMMENTS 		 7 		 87 		 1 		 1
